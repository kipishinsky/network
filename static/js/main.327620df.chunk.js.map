{"version":3,"sources":["components/Navbar/Navbar.module.css","components/Dialogs/Dialogs.module.css","Image/cat.jpg","components/Main/posts/post_block/Post.module.css","components/Main/profileInfo/ProfileInfo.module.css","components/Header/Header.module.css","components/Main/posts/post_block/like/Like.module.css","serviceWorker.js","redux/State.js","components/Header/Header.jsx","components/Navbar/Navbar.jsx","components/Main/posts/post_block/like/Like.jsx","components/Main/posts/post_block/Post.jsx","components/Main/posts/Posts.jsx","components/Main/profileInfo/ProfileInfo.jsx","components/Main/Profile.jsx","components/Dialogs/dialogItem/DialogItem.jsx","components/Dialogs/message/Message.jsx","components/Dialogs/Dialogs.jsx","App.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","rerenderEntireTree","console","log","state","profilePage","posts","id","message","likesCount","newPostText","dialogsPage","dialogs","name","img","cat","messages","addPost","newPost","push","updateNewPostText","newText","Header","className","s","header","src","alt","Navbar","nav","item","to","activeClassName","active","Like","props","l","colorlike","Post","pstblock","post_main","Posts","postsElements","map","p","newInputValue","React","createRef","postsBlock","ref","value","onChange","text","current","onClick","ProfileInfo","content","descriptionBlock","Profile","DialogItem","path","dialog","Message","Dialogs","dialogsElements","d","messagesElements","m","dialogsItems","App","exact","render","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.327620df.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__36z-G\",\"item\":\"Navbar_item__1VENn\",\"active\":\"Navbar_active__NVkZy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__SEZeu\",\"dialogsItems\":\"Dialogs_dialogsItems__2B2NT\",\"active\":\"Dialogs_active__4RZNz\",\"messages\":\"Dialogs_messages__2F8mr\",\"message\":\"Dialogs_message__Jg0cp\",\"img\":\"Dialogs_img__3uzZ3\"};","module.exports = __webpack_public_path__ + \"static/media/cat.39302231.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__Ly5A4\",\"post_main\":\"Post_post_main__2YORZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"ProfileInfo_content__2Fden\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__346aM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__prsWw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"colorlike\":\"Like_colorlike__3iNTm\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import cat from '../Image/cat.jpg'\r\n\r\nlet rerenderEntireTree = () => {\r\n    console.log ('state changed');\r\n}\r\n\r\nlet state = {\r\n    profilePage: {\r\n        posts: [\r\n            {id: 1, message: \"Hi\", likesCount: 15},\r\n            {id: 2, message: \"Hi, how are you?\", likesCount: 3},\r\n            {id: 3, message: \"Hahaha\", likesCount: 24},\r\n            {id: 4, message: \"MOREMOREMORE\", likesCount: 10},\r\n            {id: 5, message: \"SHklaw2kasj\", likesCount: 5}\r\n        ],\r\n        newPostText: \"kamasutra\"\r\n    },\r\n    dialogsPage: {\r\n        dialogs: [\r\n            {id: 1, name: \"Anton\", img: cat},\r\n            {id: 2, name: \"Sveta\", img: cat},\r\n            {id: 3, name: \"Katya\", img: cat},\r\n            {id: 4, name: \"Ira\", img: cat},\r\n            {id: 5, name: \"Dima\", img: cat}\r\n        ],\r\n        messages: [\r\n            {id: 1, message: \"Hi\"},\r\n            {id: 2, message: \"How is your\"},\r\n            {id: 3, message: \"YO\"},\r\n            {id: 4, message: \"Blya\"},\r\n            {id: 5, message: \"Pizdec\"}\r\n        ]\r\n    }\r\n};\r\n\r\nexport const addPost = () => {\r\n    let newPost = {\r\n        id: 6,\r\n        message: state.profilePage.newPostText,\r\n        likesCount: 0\r\n    };\r\n    state.profilePage.posts.push(newPost);\r\n    state.profilePage.newPostText = '';\r\n    rerenderEntireTree(state);\r\n};\r\n\r\nexport const updateNewPostText = (newText) => {\r\n    state.profilePage.newPostText = newText;\r\n    rerenderEntireTree(state);\r\n};\r\n\r\nexport const subscribe = (observer) => {\r\n    rerenderEntireTree = observer;\r\n}\r\n\r\nexport default state;","import React from \"react\";\nimport s from './Header.module.css'\n\nconst Header = () => {\n\n  return (\n        <header className={s.header}>\n            <img src=\"https://d32dm0rphc51dk.cloudfront.net/AwXYyUz1PC1aFF_05mEDrA/large.jpg\" alt=\"\"/>\n        </header>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\nimport s from './Navbar.module.css';\nimport {NavLink} from \"react-router-dom\";\n\nconst Navbar = () => {\n\n  return (\n      <nav className={s.nav}>\n          <div className = {s.item}>\n              <NavLink to=\"/profile\" activeClassName={s.active}>Profile</NavLink>\n          </div>\n          <div className = {`${s.item} ${s.active}`}>\n              <NavLink to=\"/news\" activeClassName={s.active}>News</NavLink>\n          </div>\n          <div className = {s.item}>\n              <NavLink to=\"/dialogs\" activeClassName={s.active}>Message</NavLink>\n          </div>\n          <div className = {s.item}>\n              <NavLink to=\"/video\" activeClassName={s.active}>Video</NavLink>\n          </div>\n          <div className = {s.item}>\n              <NavLink to=\"/audio\" activeClassName={s.active}>Audio</NavLink>\n          </div>\n          <div className = {s.item}>\n              <NavLink to=\"/settings\" activeClassName={s.active}>Settings</NavLink>\n          </div>\n      </nav>\n  );\n}\n\nexport default Navbar;\n","import React from \"react\";\nimport l from './Like.module.css';\n\nconst Like = (props) => {\n\n    return (\n        <div className={l.colorlike}>\n            <div>\n                <span> {props.likesCount} like</span>\n            </div>\n         </div>\n\n     );\n};\n\nexport default Like;\n","import React from \"react\";\nimport pstblock from './Post.module.css';\nimport Like from './like/Like'\n\nconst Post = (props) => {\n\n    return (\n        <div className={pstblock.post_main}>\n            <div className={pstblock.item}>\n                <div>\n                    <img src=\"https://www.elsetge.cat/myimg/f/31-317081_server-farm-wallpaper-google-server-rooms-usa.jpg\"/>\n                </div>\n                <div>\n                    Post 1 <br/>\n                    {props.message}\n                </div>\n                <Like likesCount = {props.likesCount}/>\n            </div>\n\n\n         </div>\n\n     );\n}\n\nexport default Post;\n","import React from \"react\";\nimport s from './PostInfo.css';\nimport Post from \"./post_block/Post\";\nimport {updateNewPostText} from \"../../../redux/State\";\n\nconst Posts = (props) => {\n\n    let postsElements = props.state.map ( p => <Post message = {p.message} likesCount = {p.likesCount}/>);\n\n    let newInputValue = React.createRef();\n\n    let newPostTextArea = () => {\n        props.addPost ();\n    };\n\n    let onPostChange = () => {\n        let text = newInputValue.current.value;\n        props.updateNewPostText(text);\n    };\n\n\n    return (\n\n        <div className={s.postsBlock}>\n                <h3>My post</h3>\n                <div>\n                    <div>\n                        <textarea\n                            ref = {newInputValue}\n                            value={props.newPostText}\n                            onChange={onPostChange}\n                        />\n                    </div>\n                    <div>\n                        <button onClick={newPostTextArea}>\n                            add post\n                        </button>\n                        <button>\n                            remove\n                        </button>\n                    </div>\n                </div>\n                <div className={s.posts}>\n                    {postsElements}\n                </div>\n        </div>\n    )\n};\nexport default Posts;\n","import React from \"react\";\nimport s from './ProfileInfo.module.css'\n\nconst ProfileInfo = () => {\n\n  return (\n      <div>\n          <div className={s.content}>\n                <img src=\"https://futurereport.schibsted.com/wp-content/uploads/2016/10/BIG-BRAIN_2.jpg\"/>\n          </div>\n          <div className={s.descriptionBlock}>\n                ava + dicription\n          </div>\n      </div>\n    );\n}\n\nexport default ProfileInfo;\n","import React from \"react\";\nimport w from './Profile.module.css'\nimport Posts from './posts/Posts'\nimport ProfileInfo from \"./profileInfo/ProfileInfo\";\nimport {updateNewPostText} from \"../../redux/State\";\n\n\n\nconst Profile = (props) => {\n  return (\n      <div>\n          <ProfileInfo  />\n          debugger\n          <Posts\n              state = {props.state.posts}\n              addPost = {props.addPost}\n              newPostText = {props.state.newPostText}\n              updateNewPostText = {props.updateNewPostText}\n          />\n      </div>\n    );\n}\n\nexport default Profile;\n","import React from \"react\";\nimport s from './../Dialogs.module.css'\nimport {NavLink} from \"react-router-dom\";\n\n\nconst DialogItem = (props) => {\n    let path = '/dialogs/' + props.id;\n    return (\n        <div className={s.dialog + \" \" + s.active}>\n            <img src={props.img} alt=\"\" className={s.img}/>\n            <NavLink to={path}>{props.name}</NavLink>\n        </div>\n    )\n};\n\nexport default DialogItem;\n","import React from \"react\";\nimport s from './../Dialogs.module.css'\n\nconst Message = (props) => {\n    return (\n        <div className={s.message}>{props.message}</div>\n    )\n};\n\nexport default Message;\n","import React from \"react\";\nimport s from './Dialogs.module.css'\nimport {NavLink} from \"react-router-dom\";\nimport DialogItem from \"./dialogItem/DialogItem\";\nimport Message from \"./message/Message\";\n\n\nconst Dialogs = (props) => {\n\n    let dialogsElements = props.state.dialogs.map ( d => <DialogItem name={d.name} id={d.id} img={d.img}/> );\n    let messagesElements = props.state.messages.map ( m => <Message message={m.message}/> );\n\n    return (\n        <div className={s.dialogs}>\n            <div className={s.dialogsItems}>\n                {dialogsElements}\n            </div>\n            <div className={s.messages}>\n                {messagesElements}\n            </div>\n        </div>\n    )\n};\n\nexport default Dialogs;\n","import React from 'react';\nimport './App.css';\nimport Header from \"./components/Header/Header.jsx\";\nimport Navbar from \"./components/Navbar/Navbar\";\nimport Profile from \"./components/Main/Profile\";\nimport Dialogs from \"./components/Dialogs/Dialogs\";\nimport {BrowserRouter, Route} from \"react-router-dom\";\nimport {updateNewPostText} from \"./redux/State\";\n\n\nconst App = (props) => {\n\n  return (\n      <BrowserRouter>\n          <div className={'app-wrapper'}>\n              <Header/>\n              <Navbar/>\n              <div className={'app-wrapper-content'}>\n                  {/*<Route exact path={'/profile'} component={Profile}/>*/}\n                  {/*<Route exact path={'/dialogs'} component={Dialogs}/>*/}\n\n                  <Route exact path={'/profile'} render={ () => <Profile\n                      state = {props.state.profilePage}\n                      addPost = {props.addPost}\n                      updateNewPostText = {props.updateNewPostText}\n                  />}\n                  />\n                  <Route exact path={'/dialogs'} render={ () => <Dialogs state = {props.state.dialogsPage}   />}/>\n              </div>\n\n          </div>\n      </BrowserRouter>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport * as serviceWorker from './serviceWorker';\nimport state, {subscribe} from \"./redux/State\";\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {addPost, updateNewPostText} from \"./redux/State\";\nimport {BrowserRouter} from \"react-router-dom\";\n\n\nlet rerenderEntireTree = (state) => {\n    ReactDOM.render(\n        <BrowserRouter>\n            <App state={state} addPost={addPost} updateNewPostText={updateNewPostText}/>\n        </BrowserRouter>, document.getElementById('root'));\n};\n\nrerenderEntireTree(state);\n\nsubscribe(rerenderEntireTree);\n\n\n//ReactDOM.render(<App state={state} addPost={addPost}/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}